Write a general MVVM framework in Javascript
============================================
Phase I - write the general framework
- Write a general API for a model.
	The model should have an API similar to this one:
	- init() - initalize the model 
	- getcolumns -> returns column names of the model
	- getvalueat(row, columnname) -> return specific value.
	- setvalueat(rwo, columnname, newvalue) -> set value
	- deleterwo(row)
	- addrow(dict with keys as columnnames and values)
	- getrows() - return number of rows.
	* each model should store a list of views built on top of it.
- Write a general API for a view.
	The view should have an API similar to this one:
	- init(m) - initalize the view with a reference to a model
	- update_model() - update the model with your internal state.
	- refresh() - refresh the view from the model.

Phase 2 - Implement the models
- Implment a model of a store which is stored on the server side
	It should have the following model:
	- itemid (int)
	- itemname (string)
	- itemprice (float)
	- itemcount (int) - how much of this do we have in stock.:
- Implement the model as a shopping cart which is stored on
	the client side.
	It should have two columns:
	- itemid (int) - id of item I want to buy
	- itemprice (float)
	- amount (int) - number of items of this type that I want to buy. 

Phase 3 - implement the views
- Implement a table view that can work on any model
	It will present all columns in the model.
- Implement a sum view that can work on any model.
	It will accept two column names in the model.
	It will present the sum of their multiplications.

Phase 4 - tie it all together
	Present both the store and the shopping cart with that view.
	Present the sum of the shopping cart as the sum view.
	Show that it all works by:
	- allowing to edit the table of the shopping cart.
	- updating the prices on the server side and seeing everything
	update correctly on the client side.
