General notes:
==============
- The tools we will be using are firefox (with firebug) and tomcat as a web server.
- Use the your favourite editor to text edit the solutions that you will deveop. You can use eclipse or any other development environment you are familiar with. Ask the instructor to provide you with a version of pspad if you do not have a good text editor available that you are familiar with.
- please do not use internet explorer! (more problems and no firebug!). You can check your results on internet explorer but please do not develop them on them.
- take heed never to access dojo soluation using the "file://" access method. This will not work as will be explained later on.

1) Hello Dojo World exercise
============================
- Install tomcat on your machine. Ask your instructor for a version
	of tomcat.
	How to install tomcat:
	From zip:
	1. Unzip the tomcat distribution where ever you want.
	2. On windows run $TOMCAT_ROOT/bin/startup.bat
	3. On Unix run $TOMCAT_ROOT/bin/startup.sh

	For executable on windows:
	1. Run the installation (yes, yes, I agree, bla bla).
	2. Start the tomcat service from the windows control panel.

	After the installation you need to get the cat page at
	http://localhost:8080/.

	You should also see tomcat listening on this port on netstat.
- Install dojo into a "dojo" application folder that
	you will create in $TOMCAT_HOME/webapps
- Write the Hello, World! example as described in the slides.
	Try to write it yourself, if you have problems then
	check against the template files of ex1.
	place your result in:
	$TOMCAT_HOME/webapps/dojo/hello.html
	and access it via firefox at:
	http://localhost:8080/dojo/hello.html
- See it in action and check out "view source".

2) Hello, Tabs
==============
- Use your previous exercise solution as starting point or the
- Write a Hello, Tabs application as per the slides.
template provided.
- Take heed to create at least two tabs.
- View the results using "view source".

3) Programmatic model exercise
==============================
- The exercise is based on the tabs exercise.
- Add a button which is below the tabs (NOT in the tabs). The button should be added "createNewTab".
- Whenever you click on the button, a new pane is created and added
to that tab container.
- Use the tab container API (addChild) to add a new child.
- Use the programmatic method to create the new child.
- Base your code on the example presented in the slides.

4) Themes customization exercise
================================
- This exercise relies on the previous exercise. The results for which are provided by the instructor or you can use your own solution.
- Add input boxes in each of the tabs (take a look at the dojo documentation to see exactly how to create input boxes).
- Adjust the tundra theme so that tabs have orange as their background color.
- Use the slides as reference as to how to find the right values to adjust.
- You will need to create your own css file and place it with your solution.
- Take heed to import your new css file in your solution.

7) Dojo.data exercise
=====================
- This exercise relies on the soluton to the previous one. Ask your instructor for a solution if you do not have your own.
- Write a UI which uses the previous ItemReadStore object.
- The UI should have two buttons: prev and next.
- The UI should have three boxes displaying items.
- At the begining the UI should present the first three items
out of the data store.
- next and prev should work as expected. Loading of data through
the dojo.data.Read API should be lazy.
- next and prev should be enabled/disabled according to whether there
are more items to be fetched.

8) Writing dojo widgets exercises (advanced)
============================================
Phase 1
=======
Take the dijit.form.Button widget and modify it's template to have
another element in it. First use a standard HTML tag and then
use another dojo widget.

Phase 2
=======
Create a new widget based on a button which reverses it's
title. For example <div dojoType="dojox.widget.YourWidget" label="ABCD"></div> will cause a button with "DCBA" to appear.

Phase 3
=======
Create a new mega widget that has three element: plus and minus
buttons and a text box. Whenever plus is clicked the value is
increated and whenever the minus is clicked the value is decreased.

Login page exercise
===================
- This exercise relies on the solution to the themes exercise. Use your solution or ask the instructor for a prepared solution.
- Create a login page inside the first pane of the tabbed container.
- The login page should have the following items:
	a. name entry (validate input).
			validate alpha and numbers starting with
			alpha.
	b. password entry (use a password field and validate
			at least 8 characters with both
			alpha and number and special).
	c. im type. have option read from the server via json
		and a data store.
		If IM is "none" then the next field should be
		disabled.
		(e.g. yahoo im, google talk, jabber, ...)
	d. im name: your id in the im system.
	e. your photo with option to upload your photo.
	f. continue (register) button - should only be available if
		user and password are ok.
- select the best widget for the job (use theme tester)
- try not to use any HTML elements - only dojo widgets
- try to put everything in a container.
- have nice error messages to be displayed when input is wrong.
