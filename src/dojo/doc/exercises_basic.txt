General notes:
==============
- The tools we will be using are firefox (with firebug) and tomcat as a web server.
- Use the your favourite editor to text edit the solutions that you will deveop. You can use eclipse or any other development environment you are familiar with. Ask the instructor to provide you with a version of pspad if you do not have a good text editor available that you are familiar with.
- please do not use internet explorer! (more problems and no firebug!). You can check your results on internet explorer but please do not develop them on them.
- take heed never to access dojo soluation using the "file://" access method. This will not work as will be explained later on.

1) Hello Dojo World exercise
============================
- Install tomcat on your machine. Ask your instructor for a version
	of tomcat.
	How to install tomcat:
	From zip:
	1. Unzip the tomcat distribution where ever you want.
	2. On windows run $TOMCAT_ROOT/bin/startup.bat
	3. On Unix run $TOMCAT_ROOT/bin/startup.sh

	For executable on windows:
	1. Run the installation (yes, yes, I agree, bla bla).
	2. Start the tomcat service from the windows control panel.

	After the installation you need to get the cat page at
	http://localhost:8080/.

	You should also see tomcat listening on this port on netstat.
- Install dojo into a "dojo" application folder that
	you will create in $TOMCAT_HOME/webapps
- Write the Hello, World! example as described in the slides.
	Try to write it yourself, if you have problems then
	check against the template files of ex1.
	place your result in:
	$TOMCAT_HOME/webapps/dojo/hello.html
	and access it via firefox at:
	http://localhost:8080/dojo/hello.html
- See it in action and check out "view source".

2) Hello, Tabs
==============
- Use your previous exercise solution as starting point or the
- Write a Hello, Tabs application as per the slides.
template provided.
- Take heed to create at least two tabs.
- View the results using "view source".

3) Programmatic model exercise
==============================
- The exercise is based on the tabs exercise.
- Add a button which is below the tabs (NOT in the tabs).
- The button should be named "createNewTab".
- Whenever you click on the button, a new pane is created and added
to that tab container.
- Use the tab container API (addChild) to add a new child.
- Use the programmatic method to create the new child.
- Base your code on the example presented in the slides.

4) Themes customization exercise
================================
- This exercise relies on the previous exercise. The results for which are provided by the instructor or you can use your own solution.
- Add input boxes in each of the tabs (take a look at the dojo documentation to see exactly how to create input boxes).
- Adjust the tundra theme so that tabs have orange as their background color.
- Use the slides as reference as to how to find the right values to adjust.
- You will need to create your own css file and place it with your solution.
- Take heed to import your new css file in your solution.

5) dojo.connect exercise
========================
Create an application with 3 buttons: connect, disconnect, click
At the begining the disconnect button is disabled.
At the begining the click does nothing.
When connect is called it uses dojo.connect so that when clicking
the "click" button an alert is shown. Connect then becomes disabled and disconnect
becomes enabled. Disconnect does the opposite and disconnects the event.

5b) dojo.connect publish/subscribe exercise
===========================================
Create an application with 5 buttons: subscribe1, unsubscribe1, subscribe2, unsubscribe2, publish. Also add a TextBox to hold some data.
At the begining the unsubscribe buttons are off.
Clicking on publish publishes the same event of a type you decide with the data taken from the textbox.
Subscribe1 subscribes on the event published and shows the data on the console using
console.debug.
Subscribe2 subscribes on the event published and shows the data using an alert.
Each unsubscribe unsubscribes the appropriate call.
Handle enable/disable status for the subscribe/unsubscribe buttons.

7) Ajax exercise
================
Write an application that has a text box and a "get it from server" button. Whenever the "get it from server" button is pressed an Ajax call is generated and gets the url in the box from the server and shows it in a dijit.form.Textarea widget. If the url in the text box is wrong then show the error in a special status box (show ok messages in it also).

8) Dojo.back exercise (history management)
==========================================
- Write an application two text boxes and an "add" button.
- First textbox shows a sum up til now and is disabled.
- Second textbox is editable by the user.
- The "add" button should be enabled only when there is a valid number in the textbox.
- Whenever "add" is clicked, the number shown in the first box should be increased by the value shown in the second box.
- Now make the back button work so that it will return previous values.
Advanced:
- Make odd values addition be undoable. Show this to the user.

9) Dojo.data exercise
=====================
- At the begining the UI should present the first three items out of the data store.
- items should be shown in three TextBox widgets.
- use an ItemReadStore object to get the data.
- The UI should have two buttons: prev and next.
- next and prev should work as expected. Loading of data through
the dojo.data.Read API should be lazy.
- next and prev should be enabled/disabled according to whether there
are more items to be fetched.

9b) Dojo.data exercise (b)
==========================
- Create an ItemFileReadStore object programmatically.
Populate it with data (either using a url on the server
or using a hardcoded javascript object).
Connect it to a combo box which would show the data.
- Create a button and a textbox. Whenever the button
is pressed display all the items in the store by querying
the store for data according to the query string specified
in the textbox.

10) Writing dojo widgets exercises (advanced)
=============================================
Phase 1
=======
Take the dijit.form.Button widget and modify it's template to have
another element in it. First use a standard HTML tag and then
use another dojo widget.

Phase 2
=======
Create a new widget based on a button which reverses it's
title. For example <div dojoType="dojox.widget.YourWidget" label="ABCD"></div> will cause a button with "DCBA" to appear.

Phase 3
=======
Create a new mega widget that has three element: plus and minus
buttons and a text box. Whenever plus is clicked the value is
increated and whenever the minus is clicked the value is decreased.

============================================================
===================Advanced exercises ======================
============================================================

Login page exercise
===================
- Create a login page inside the first pane of the tabbed container.
- The login page should have the following items:
	a. name entry (validate input).
		validate alpha and numbers starting with
		alpha.
	b. password entry (use a password field and validate
		at least 8 characters with both
		alpha and number and special).
	c. im type. have option read from the server via json
		and a data store.
		If IM is "none" then the next field should be
		disabled.
		(e.g. yahoo im, google talk, jabber, ...)
		Do autocomplete on it with the list of IMs coming from the server.
	d. im name: your id in the im system.
		Validation should be IM specific.
	e. your photo with option to upload your photo.
	f. continue (register) button - should only be available if
		user and password are ok.
- select the best widget for the job (use theme tester)
- try not to use any HTML elements - only dojo widgets
- try to put everything in a container.
- have nice error messages displayed when input is wrong.

A Tree exercise
===============
- Use dijit.Tree and create a tree.
- Add a text field.
- Use a dojo.data.ItemFileReadStore as the tree store and fetch the data
	from the server.
- Any time a click is made on the tree update the TextBox to show the selection.

- Solve the click issue in two ways:
	a. A direct click on the tree.
	b. publish/subscribe: subscribe on the tree id as the topic and get the
		event that way.

Grid : This is a multiple purpose exercise:
===========================================
a. Work with the grid widget.
b. Inherit and customize the grid widget.
c. Add pagination to the grid widget.

a. Work with the grid wiget.
----------------------------
Create an application that uses the grid widget to show some
column/row based data. Make up what ever data you want.
Add a button that increments a specific cell within the grid
that has a numeric value.

b. Inherit and customize the grid widget.
-----------------------------------------
Inherit from the grid widget. Add a property "url" to the child and make the child fetch the data using Ajax from that URL.
The url on the server should look like "get_data?start=0,count=10"
Show 10 lines in the grid.

c. Add pagination to the grid widget
------------------------------------
Override the onKeyDown event on the child grid widget.
One key (n) would cause the widget to display the next 10 lines
from the server and another key (p) would cause the widget to
display the previous 10 lines from the server.

Dojo widget writing exercise:
=============================
You need to make THIS dojo application work:

	dojo.require("cisco.Roller");

	<div dojoType="cisco.Roller" initVal="7" incr="2" max="10"></div>

How ?

Create a package(folder), widget (.js file with template within).
Use attach points and attach events and create the following layout:

		< [val] >

(two buttons and an input text).

Connect all relevant events.

DO NOT WORRY about look and feel!!!
