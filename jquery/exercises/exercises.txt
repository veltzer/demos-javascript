Ex1 : create a table using jQuery
=================================
Create a single JavaScript function.

The function receives:
1. An id of an empty div.
2. number of columns
3. number of rows.

The function would create in that divs location:
- a table with the specified rows and columns.
- all odd rows would be greyed.
- prev and next buttons which are disabled.
- whenever a user clicks on a table cell, show some alert.

DO NOT USE THE DOM API. Just jQuery.

Demostrate your functions use.

Ex2 - based on Ex1
==================
design your code better

- Make the 'CreateTable' function be a constructor for an object.
- Store important information that you need to manage this table in it.
- Separate visuals into css and only refer to class names from your code.
- Create methods that allow one to call "next" and "prev" functionality from afar
	(outside your object)
- Put the 'Table Widget' into it's own file.
- Use the prototype feature to write methods for this widget.
- Use a map(object) to initialize all attributes of the widget.
- Allow one to specify only the attributes that are different from default.
- Allow one to specify whether next and prev button should be created or not...

Ex3 - based on Ex2
==================
Add paramters to the constructor specifying the source url for the data on the server
and the HTTP method (GET/POST).
Make the PaginatedTable object "know" it's position from within the source of the data.
Do ajax via the jQuery.ajax function.
Send to the server the rows that you need.
Get the results from the server.
Show errors from the server in a predefined position within the paginated table
(create a new element to show these errors).
Show the data when request for data from the server succeeds.
Connect the next and prev methods to "do the right thing" (get more data from the
server).

Ex4 - based on Ex3 + publish/subscribe solution
===============================================
Enhance your table with publish/subscribe capabilities.
Three publish/subscribe issues:
- Each time a user clicks on a row in the table make the table publish an appropriate
	event.
	Show this works by subscribing to the event and printing the data that was
	selected.
- Make the table publish 'doing_next' and 'doing_prev' events. This will enable outsiders
	to subscribe to these table events without an explicit handle to the table.
	Demonstrate the use of such subscriptions.
- Make the table subscribe to 'next' and 'prev' events so that next and prev could
	be triggered via 'publish' without an explicit handle to the table.
	Show this works by publishing 'next' and 'prev' events and showing that
	the table updates it's data.
